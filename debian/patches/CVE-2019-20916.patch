--- python-pip-1.5.6.orig/pip/download.py
+++ python-pip-1.5.6/pip/download.py
@@ -387,6 +387,29 @@ def _get_hash_from_file(target_file, lin
     return download_hash
 
 
+def sanitize_content_filename(filename):
+    # type: (str) -> str
+    """
+    Sanitize the "filename" value from a Content-Disposition header.
+    """
+    return os.path.basename(filename)
+
+
+def parse_content_disposition(content_disposition, default_filename):
+    # type: (str, str) -> str
+    """
+    Parse the "filename" value from a Content-Disposition header, and
+    return the default filename if the result is empty.
+    """
+    _type, params = cgi.parse_header(content_disposition)
+    filename = params.get('filename')
+    if filename:
+        # We need to sanitize the filename to prevent directory traversal
+        # in case the filename contains ".." path parts.
+        filename = sanitize_content_filename(filename)
+    return filename or default_filename
+
+
 def _download_url(resp, link, temp_location):
     fp = open(temp_location, 'wb')
     download_hash = None
@@ -555,10 +578,7 @@ def unpack_http_url(link, location, down
         # Have a look at the Content-Disposition header for a better guess
         content_disposition = resp.headers.get('content-disposition')
         if content_disposition:
-            type, params = cgi.parse_header(content_disposition)
-            # We use ``or`` here because we don't want to use an "empty" value
-            # from the filename param.
-            filename = params.get('filename') or filename
+            filename = parse_content_disposition(content_disposition, filename)
         ext = splitext(filename)[1]
         if not ext:
             ext = mimetypes.guess_extension(content_type)
